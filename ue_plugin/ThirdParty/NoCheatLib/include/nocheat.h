/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <cstdarg>
#include <cstdint>
#include <cstdlib>
#include <ostream>
#include <new>

namespace nocheat {

extern "C" {

/// FFI: analyze a JSON buffer of PlayerStats; returns JSON buffer
///
/// This function provides a C-compatible interface for the cheat detection system.
/// It takes a JSON buffer containing player statistics, analyzes them, and returns
/// the results as a JSON buffer.
///
/// # Safety
///
/// This function is unsafe because it deals with raw pointers and memory allocation
/// across the FFI boundary. The caller is responsible for:
///
/// - Ensuring the input pointers are valid and properly aligned
/// - Freeing the returned buffer using the `free_buffer` function
///
/// # Arguments
///
/// * `stats_json_ptr` - Pointer to a UTF-8 encoded JSON buffer
/// * `stats_json_len` - Length of the JSON buffer in bytes
/// * `out_json_ptr` - Pointer to a location where the output buffer pointer will be stored
/// * `out_json_len` - Pointer to a location where the output buffer length will be stored
///
/// # Returns
///
/// * `0` on success
/// * Negative values on various errors:
///   * `-1` - Null pointer provided
///   * `-2` - JSON parsing error
///   * `-3` - Analysis error
///   * `-4` - Serialization error
///   * `-5` - Memory allocation error
int analyze_round(const unsigned char *stats_json_ptr,
                  size_t stats_json_len,
                  unsigned char **out_json_ptr,
                  size_t *out_json_len);

/// Companion to free allocated buffer
///
/// This function must be called to free the memory allocated by `analyze_round`.
///
/// # Safety
///
/// This function is unsafe because it deals with raw pointers and memory deallocation.
/// The caller must ensure that:
///
/// - The pointer was previously allocated by `analyze_round`
/// - The pointer has not already been freed
/// - The length matches what was given in `out_json_len`
///
/// # Arguments
///
/// * `ptr` - Pointer to the buffer to free
/// * `len` - Length of the buffer in bytes
void free_buffer(unsigned char *ptr, size_t len);

/// Set the path to load a custom model
///
/// This function allows loading a custom model from a specified path.
/// It's particularly useful when integrating with game engines like Unreal Engine
/// where the default path may not be accessible or when you want to load different models.
///
/// # Safety
///
/// This function is unsafe because it:
/// - Modifies a global static variable that affects all future model loading
/// - Takes a raw pointer that must be valid UTF-8 encoded path string
///
/// # Arguments
///
/// * `path_ptr` - Pointer to a null-terminated UTF-8 encoded string containing the model path
/// * `path_len` - Length of the path string in bytes (not including null terminator)
///
/// # Returns
///
/// * `0` on success
/// * `-1` if the path pointer is null
/// * `-2` if the path is not valid UTF-8
/// * `-3` if the model file doesn't exist or can't be opened
/// * `-4` if the model couldn't be deserialized (invalid format)
int set_model_path(const unsigned char *path_ptr, size_t path_len);

}  // extern "C"

}  // namespace nocheat
